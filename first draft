#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define ARRAYSIZE 100

typedef struct date
{
    int day;
    int month;
    int year;//in 2 dig
}date;

typedef struct item_tag
{   
    int item_id;
    char *itemname;
    int quantity;
    date *expiry_date;
    int threshold_quantity;
    struct item_tag *prev;
    struct item_tag *next;
}Item;

typedef struct Aisle_tag    //for one ailse in the walmart
{
    int aisle_no; // starts from 1
    char *aisle_name;
    Item *head;
}Aisle_tag;

Aisle_tag* AisleArray[ARRAYSIZE];    //indices are array nos

Item *CreateItem(int id, char *name,  int quan, date *d, int tq)
{
    Item *nitem = (Item *)malloc(sizeof(Item));
    nitem->item_id = id;
    nitem->itemname = (char *)malloc(strlen(name) + 1);
    strcpy(nitem->itemname, name);
    nitem->quantity = quan;
    nitem->expiry_date = d;
    nitem->threshold_quantity = tq;
    nitem->next = nitem->prev = NULL;
    return nitem;
}

Aisle_tag *CreateAisle(char *name, int a_no)
{
    Aisle_tag *aptr = (Aisle_tag *)malloc(sizeof(Aisle_tag));
    aptr->aisle_name = (char *)malloc(strlen(name)+1);
    strcpy(aptr->aisle_name, name);
    aptr->head = NULL;
    aptr->aisle_no = a_no;
    return aptr;
};

date* CreateDate(int DD, int MM, int YY) {
    date* newDate = (date*)malloc(sizeof(date));
    newDate->day = DD;
    newDate->month = MM;
    newDate->year = YY;
    return newDate;
}

void initializeAisleArray()
{
    int i;
    for(i = 0; i < ARRAYSIZE; i++)
    {
        AisleArray[i] = NULL;
    }
}

void DeleteItem(Item *iptr)
{
    free(iptr->itemname);
    free(iptr->expiry_date);
    free(iptr);
}

void AddOrUpdateItem(int id, char *name,  int quan, int tq, int aisle_no)  //To add item with item ID id in the aisleno aisle_no
{
    date *d;
    d = (date *)malloc(sizeof(date));
    printf("Input expiry date (DD): ");
    scanf("%d", &d->day);
    printf("Input expiry month (MM): ");
    scanf("%d", &d->month);
    printf("Input expiry year (YY): ");
    scanf("%d", &d->year);

    Item *iptr = CreateItem(id, name, quan, d, tq);

    if(AisleArray[aisle_no] == NULL)
    {
        char *Aislename;
        printf("No Aisle with this no, please enter Aisle name to create Aisle\n");
        scanf("%s", Aislename);
        AisleArray[aisle_no] = CreateAisle(Aislename, aisle_no);
        AisleArray[aisle_no]->head = iptr;
        printf("Item Successfully Added\n");
    }
    else
    {
        Item *ptr = AisleArray[aisle_no]->head;
        if(ptr == NULL)
        {
            printf("Aisle is Empty\n");
            AisleArray[aisle_no]->head = iptr;
        }
        else
        {
            while(ptr->next != NULL && ptr->item_id != id)
            {
                ptr = iptr->next;
            }
            if(ptr->next == NULL)
            {
                printf("This is a new item, adding the item:\n");
                ptr->next->prev = iptr->next;
                printf("Addition successful\n");
            }
            else
            {
                printf("This item already exists\n");
                iptr->quantity += quan;
                printf("Addition successful\n");
                DeleteItem(iptr);
            }
        }

    }
}

void DeleteItemFromAisle(int itemid, int a_no)
{
    if(AisleArray[a_no] == NULL || AisleArray[a_no]->head == NULL)
    {
        printf("Aisle Empty\n");
    }
    else if(AisleArray[a_no]->head->item_id == itemid)
    {
        Item *ptr = AisleArray[a_no]->head;
        AisleArray[a_no]->head = AisleArray[a_no]->head->next;
        AisleArray[a_no]->head->prev = NULL;
        DeleteItem(ptr);
    }
}

void DeleteAisle(int a_no)
{
    if(AisleArray[a_no] != NULL)
    {
        Item *iptr, *ptr;
        while(iptr != NULL)
        {
            ptr = iptr;
            iptr = iptr->next;
            DeleteItem(ptr);
        }
        AisleArray[a_no] = NULL;
    }
}

int isExpired(date *expiry, date *target)
{
    int retval;
    if(expiry->year < target->year)
    {
        retval = 0;
    }
    else if(expiry->year > target->year)
    {
        retval = 1;
    }
    else
    {
        if(expiry->month < target->month)
        {
            retval = 0;
        }
        else if(expiry->month > target->month)
        {
            retval = 1;
        }
        else
        {
            if(expiry->day < target->day)
            {
                retval = 0;
            }
            else
            {
                retval = 1;
            }
        }
    }
    return retval;
}

int isItemAvailable (int id, int qty_req, date* d)
{
    int i, retval, flag;
    retval = flag = 0;

    Item *iptr;

    for(i = 0; i < ARRAYSIZE && flag == 0; i++)
    {
        if(AisleArray[i] != NULL && AisleArray[i]->head != NULL)
        {
            iptr = AisleArray[i]->head;
            while(iptr != NULL && iptr->item_id != id)
            {
                iptr = iptr->next;
            }
            if(iptr != NULL)
            {
                if(iptr->quantity >= qty_req && !isExpired(iptr->expiry_date, d))
                {
                    retval = 1;
                    flag = 1;
                }
            }
        }
    }
    return retval;
}

date dateOneWeekLater(date inputDate) {
    // Add 7 days
    inputDate.day += 7;

    // Adjust if day exceeds 30 (assuming all months have 30 days)
    if (inputDate.day > 30) {
        inputDate.day -= 30;
        inputDate.month++;

        // Adjust if month exceeds 12
        if (inputDate.month > 12) {
            inputDate.month = 1;
            inputDate.year++; // Increment year if month exceeds 12
        }
    }
    return inputDate;
}

date dateOneDayLater(date inputDate) {
    inputDate.day++; // Add one day

    // Adjust if day exceeds 30 (assuming all months have 30 days)
    if (inputDate.day > 30) {
        inputDate.day = 1;
        inputDate.month++;

        // Adjust if month exceeds 12
        if (inputDate.month > 12) {
            inputDate.month = 1;
            inputDate.year++; // Increment year if month exceeds 12
        }
    }
    return inputDate;
}

void Expiresin1week_ReadyToeat_itemsPrint(date* today)
{
    date target = dateOneWeekLater(*today);
    int i;
    Item *iptr;

    //clear expired items acc to todays date
    printf("Printing ready to eat items that'll expire withing one week\n");

    if(AisleArray[3] != NULL && AisleArray[3]->head != NULL)    //Ready to eat items are 4th in the aisle array, index 3
    {
        iptr = AisleArray[3]->head;
        if(isExpired(iptr->expiry_date, &target))
        {
            printf("%s\n", iptr->itemname);
        }
    }

}

void Expiresin1day_dairy_itemsPrint(date* today)
{
    date target = dateOneWeekLater(*today);
    int i;
    Item *iptr;
    
    //clear expired items acc to todays date
    printf("Printing dairy items that'll expire within one day\n");

    if(AisleArray[0] != NULL && AisleArray[0]->head != NULL)
    {
        iptr = AisleArray[0]->head;
        if(isExpired(iptr->expiry_date, &target))
        {
            printf("%s\n", iptr->itemname);
        }
    }

}

void ThresholdCheck(Item* iptr) //To be called at the time of purchase
{
    if(iptr->quantity < iptr->threshold_quantity)
    {
        printf("Item has gone beyond Threshold\n");
    }
    else
    {
        printf("Item within Threshold limits\n");
    }
}

// void PrintMartFile(char *filename)
// {
//     FILE *file = fopen(filename, "w");

//     int i;
//     Item *ptr;

//     for(i = 0; i < ARRAYSIZE; i++)
//     {
//         if(AisleArray[i] != NULL)
//         {
//             fprintf(file, "\nAisle no = %d  Aisle name: %s \n", AisleArray[i]->aisle_no, AisleArray[i]->aisle_name);
//             ptr = AisleArray[i]->head;
//             while(ptr!=NULL)
//             {
//                 fprintf(file, "")
//             }
//         }
//     }
// }

void PrintMart()
{
    int i;
    Item *ptr;

    for(i = 0; i < ARRAYSIZE; i++)
    {
        if(AisleArray[i] != NULL)
        {
            printf("\nAisle no = %d  Aisle name: %s \n", AisleArray[i]->aisle_no, AisleArray[i]->aisle_name);
            ptr = AisleArray[i]->head;
            while(ptr!=NULL)
            {
                printf("Item ID: %d\t\t\tItem name: %s\t\t\tQuantity: %d\t\t\tThreshold qty: %d\t\t\texpiry date: %d/%d/%d\n", ptr->item_id, ptr->itemname, ptr->quantity, ptr->threshold_quantity, ptr->expiry_date->day, ptr->expiry_date->month, ptr->expiry_date->year);
                ptr = ptr->next;
            }
            printf("\n");
        }
    }
}

void main()
{
    int i, j;
    FILE *file = fopen("walmart6.csv", "r");

    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    for(i = 0; i < 5; i++)
    {
        char aislename[50];
        fgets(aislename, sizeof(aislename), file);

        AisleArray[i] = CreateAisle(aislename, i);

        Item *last = NULL;
        for(j = 0; j < 5; j++)
        {
            int DD, MM, YY, id, quan, tq;
            char name[50];

            fscanf(file,"%d,%49[^,],%d,%d,%d,%d,%d\n", &id, name, &quan, &DD, &MM, &YY, &tq);

            date *d = CreateDate(DD, MM, YY);
            Item *iptr = CreateItem(id, name, quan, d, tq);
            Item *ptr = iptr;

            if(j == 0)
            {
                AisleArray[i]->head = iptr;
                last = iptr;
                last->next = NULL;
                last->prev = NULL;
            }
            else
            {
                last->next = iptr;
                iptr->prev = last;
                last = iptr;
            }
        }    
    }
    PrintMart();
}
